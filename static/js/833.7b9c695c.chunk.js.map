{"version":3,"file":"static/js/833.7b9c695c.chunk.js","mappings":"gNAGO,MAAMA,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mGAInBC,IAAA,IAAC,WAAEC,GAAYD,EAAA,SAAAE,OAAQD,EAAU,SAGpCE,EAAOP,EAAAA,GAAOQ,GAAEC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,sYAYlBO,EAAAA,EAAMC,SASJC,EAAWZ,EAAAA,GAAOa,GAAEC,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,wRASpBO,EAAAA,EAAMK,S,wBC5BZ,MAAMC,GAAMC,EAAAA,EAAAA,aACjB,CAAAb,EAAqDc,KAAS,IAA7D,kBAAEC,EAAiB,UAAEC,EAAS,UAAEC,GAAkBjB,EACjD,MAAMkB,GAAiBC,EAAAA,EAAAA,cACpBL,IACCC,KACAK,EAAAA,EAAAA,IAAcN,EAAI,GAEpB,CAACC,IAGGM,GAAwBF,EAAAA,EAAAA,cAAY,MACxCG,EAAAA,EAAAA,MACAP,GAAmB,GAClB,CAACA,IAEJ,OACEQ,EAAAA,EAAAA,MAAC5B,EAAS,CAACM,WAAYgB,EAAUO,SAAA,EAC/BC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,KACZH,EAAAA,EAAAA,MAACpB,EAAI,CAAAqB,SAAA,EACHC,EAAAA,EAAAA,KAACjB,EAAQ,CAACmB,QAASN,EAAsBG,SAAC,gDAC1CC,EAAAA,EAAAA,KAACjB,EAAQ,CAACmB,QAASA,IAAMT,EAAeF,EAAUY,aAAaJ,SAAC,0CAGhEC,EAAAA,EAAAA,KAACjB,EAAQ,CAACmB,QAASA,IAAMT,EAAeF,EAAUa,aAAaL,SAAC,gDAGhEC,EAAAA,EAAAA,KAACjB,EAAQ,CAACmB,QAASA,IAAMT,EAAeF,EAAUc,aAAaN,SAAC,0CAGhEC,EAAAA,EAAAA,KAACjB,EAAQ,CAACmB,QAASA,IAAMT,EAAeF,EAAUe,aAAaP,SAAC,0DAIxD,I,sBCzCX,MAAM7B,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yJAKxBC,IAAA,IAAC,YAAEgC,GAAahC,EAAA,OAAMgC,EAAc,IAAM,QAAQ,GAC7C1B,EAAAA,EAAM2B,WAKTC,EAAetC,EAAAA,GAAOC,IAAGQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2FAOzBoC,GAAQvC,EAAAA,EAAAA,IAAOwC,EAAAA,IAAPxC,CAAgBc,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,wKAI1BO,EAAAA,EAAMC,QAIJD,EAAAA,EAAMK,SAKN0B,EAAgBzC,EAAAA,GAAOC,IAAGyC,IAAAA,GAAAvC,EAAAA,EAAAA,GAAA,uD,cCvBvC,MA2BA,GA3Bec,EAAAA,EAAAA,aACb,CAAAb,EAAkDc,KAAS,IAA1D,cAAEyB,EAAa,WAAEC,EAAU,UAAExB,GAAkBhB,EAC9C,MAAMkB,GAAiBC,EAAAA,EAAAA,cACrB,WACEoB,GAAc,EAChB,GACA,CAACA,KAEG,UAAEtB,IAAcwB,EAAAA,EAAAA,IAAavB,GAEnC,OACEO,EAAAA,EAAAA,KAAC9B,EAAS,CAACqC,YAAaQ,EAAWhB,UACjCD,EAAAA,EAAAA,MAACc,EAAa,CAAAb,SAAA,EACZC,EAAAA,EAAAA,KAACS,EAAY,CAAAV,UACXC,EAAAA,EAAAA,KAACU,EAAK,CAACR,QAAST,OAElBO,EAAAA,EAAAA,KAACb,EAAG,CACFI,UAAWA,EACXD,kBAAmBG,EACnBD,UAAWA,QAGL,G","sources":["components/Nav/NavStyles.ts","components/Nav/Nav.tsx","components/NavBar/NavBarStyles.ts","components/NavBar/NavBar.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { COLOR } from \"../../assets/styles\";\n\nexport const Container = styled.div<{ $marginTop: number }>`\n  display: flex;\n  flex-direction: column;\n  padding: 30px 0 0 0;\n  margin-top: ${({ $marginTop }) => `${$marginTop}px`};\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  width: 70%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  font-weight: 600;\n  font-size: 22px;\n  color: ${COLOR.grey400};\n  @media screen and (max-width: 700px) {\n    height: auto;\n    width: 100%;\n    align-items: flex-start;\n    padding: 0 0 0 30px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  min-width: 100px;\n  height: 100%;\n  cursor: pointer;\n  &:hover {\n    transition: linear 0.1s;\n    transform: translate(0px, -4px);\n    color: ${COLOR.grey200};\n  }\n\n  @media screen and (max-width: 700px) {\n    height: 60px;\n  }\n`;\n","import { forwardRef, useCallback } from \"react\";\nimport { executeScroll, scrollToTop } from \"../../assets/helpers\";\nimport { Container, List, ListItem } from \"./NavStyles\";\nimport { ReferenceType } from \"../../assets/types/types\";\nimport { UserProfile } from \"../UserProfile/UserProfile\";\n\ntype Props = {\n  onOpenMenuHandler: () => void;\n  marginTop: number;\n  reference: ReferenceType;\n};\n\nexport const Nav = forwardRef(\n  ({ onOpenMenuHandler, reference, marginTop }: Props, ref) => {\n    const onClickHandler = useCallback(\n      (ref: ReferenceType[keyof ReferenceType]) => {\n        onOpenMenuHandler();\n        executeScroll(ref);\n      },\n      [onOpenMenuHandler]\n    );\n\n    const onMainBlockNavHandler = useCallback(() => {\n      scrollToTop();\n      onOpenMenuHandler();\n    }, [onOpenMenuHandler]);\n\n    return (\n      <Container $marginTop={marginTop}>\n        <UserProfile />\n        <List>\n          <ListItem onClick={onMainBlockNavHandler}>Главная</ListItem>\n          <ListItem onClick={() => onClickHandler(reference.servicesRef)}>\n            Услуги\n          </ListItem>\n          <ListItem onClick={() => onClickHandler(reference.ourWorksRef)}>\n            Галерея\n          </ListItem>\n          <ListItem onClick={() => onClickHandler(reference.commentsRef)}>\n            Отзывы\n          </ListItem>\n          <ListItem onClick={() => onClickHandler(reference.contactsRef)}>\n            Контакты\n          </ListItem>\n        </List>\n      </Container>\n    );\n  }\n);\n","import styled from \"styled-components\";\r\nimport { COLOR } from \"../../assets/styles\";\r\nimport { RxCross1 } from \"react-icons/rx\";\r\n\r\nexport const Container = styled.div<{ $isOpenMenu: boolean }>`\r\n  position: absolute;\r\n  width: 120px;\r\n  height: 100%;\r\n  top: 0;\r\n  right: ${({ $isOpenMenu }) => ($isOpenMenu ? \"0\" : \"-250px\")};\r\n  background: ${COLOR.orange200};\r\n  transition: ease 1s;\r\n  z-index: 14;\r\n`;\r\n\r\nexport const CloseWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  width: 100%;\r\n  height: 60px;\r\n`;\r\n\r\nexport const Close = styled(RxCross1)`\r\n  width: 30px;\r\n  height: 30px;\r\n  margin: 20px 10px 0 0;\r\n  color: ${COLOR.grey400};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: ${COLOR.grey200};\r\n    transition: 0.5s ease;\r\n  }\r\n`;\r\n\r\nexport const NavBarWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import { forwardRef, useCallback } from \"react\";\nimport { Nav } from \"../Nav/Nav\";\nimport { Close, CloseWrapper, Container, NavBarWrapper } from \"./NavBarStyles\";\nimport { ReferenceType } from \"../../assets/types/types\";\nimport { useMarginTop } from \"../../assets/hooks\";\n\ntype Props = {\n  setIsOpenMenu: (value: boolean) => void;\n  isOpenMenu: boolean;\n  reference: ReferenceType;\n};\n\nconst NavBar = forwardRef(\n  ({ setIsOpenMenu, isOpenMenu, reference }: Props, ref) => {\n    const onClickHandler = useCallback(\n      function () {\n        setIsOpenMenu(false);\n      },\n      [setIsOpenMenu]\n    );\n    const { marginTop } = useMarginTop(onClickHandler);\n\n    return (\n      <Container $isOpenMenu={isOpenMenu}>\n        <NavBarWrapper>\n          <CloseWrapper>\n            <Close onClick={onClickHandler} />\n          </CloseWrapper>\n          <Nav\n            reference={reference}\n            onOpenMenuHandler={onClickHandler}\n            marginTop={marginTop}\n          />\n        </NavBarWrapper>\n      </Container>\n    );\n  }\n);\n\nexport default NavBar;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","$marginTop","concat","List","ul","_templateObject2","COLOR","grey400","ListItem","li","_templateObject3","grey200","Nav","forwardRef","ref","onOpenMenuHandler","reference","marginTop","onClickHandler","useCallback","executeScroll","onMainBlockNavHandler","scrollToTop","_jsxs","children","_jsx","UserProfile","onClick","servicesRef","ourWorksRef","commentsRef","contactsRef","$isOpenMenu","orange200","CloseWrapper","Close","RxCross1","NavBarWrapper","_templateObject4","setIsOpenMenu","isOpenMenu","useMarginTop"],"sourceRoot":""}