{"version":3,"file":"static/js/200.c3e06bb8.chunk.js","mappings":"4PAIO,MAAMA,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sLAatBC,EAAQJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oYAKTG,IAAA,IAAC,KAAEC,GAAMD,EAAA,aAAAE,OAAYD,EAAI,QAclCE,GAAaT,EAAAA,EAAAA,IAAOU,EAAAA,IAAPV,CAAmBW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,yDAGlCS,EAAAA,EAAMC,SAGJC,GAAad,EAAAA,EAAAA,IAAOe,EAAAA,IAAPf,CAAoBgB,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,yDAGnCS,EAAAA,EAAMC,SAGJI,EAAgBjB,EAAAA,GAAOkB,OAAMC,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,2TAM1BS,EAAAA,EAAMQ,UAKVX,EAAuBK,EACtBF,EAAAA,EAAMS,S,cChDnB,MAAMC,EAAa,CACjBC,WACEC,EAAAA,EAAAA,KAACP,EAAa,CAAAQ,UACZD,EAAAA,EAAAA,KAACf,EAAU,MAGfiB,WACEF,EAAAA,EAAAA,KAACP,EAAa,CAAAQ,UACZD,EAAAA,EAAAA,KAACV,EAAU,OAKJa,GAAYC,EAAAA,EAAAA,OAAK,KAE1BJ,EAAAA,EAAAA,KAACzB,EAAS,CAAA0B,UACRD,EAAAA,EAAAA,KAACK,EAAAA,GAAK,IAAKP,EAAUG,SAClBK,EAAAA,GAAUC,MAAMC,KAAI,CAACC,EAAYC,KAChCV,EAAAA,EAAAA,KAACpB,EAAK,CAAaG,KAAM0B,EAAWE,KAAxBD,W,wBC3Bf,MAAMnC,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yKAUtBiC,EAAQpC,EAAAA,GAAOqC,GAAEhC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0EAMjBmC,EAAetC,EAAAA,GAAOC,IAAGU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0GAQzBc,EAAgBjB,EAAAA,GAAOC,IAAGe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,qIAS1BoC,EAAWvC,EAAAA,GAAOC,IAAGkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,2C,cCtBlC,MA6BA,GA7BiBqC,EAAAA,EAAAA,aAAW,CAACC,EAAOC,KAClC,MAAM,aAAEC,EAAY,UAAEC,IAAcC,EAAAA,EAAAA,MAE9BC,GAAeC,EAAAA,EAAAA,cAAY,KAC/BH,GAAU,EAAK,GACd,CAACA,IAEJ,OACEI,EAAAA,EAAAA,MAACjD,EAAS,CAAA0B,SAAA,EACRD,EAAAA,EAAAA,KAACe,EAAQ,CAACG,IAAKA,KACflB,EAAAA,EAAAA,KAACY,EAAK,CAAAX,SAAC,mEACPD,EAAAA,EAAAA,KAACc,EAAY,CAAAb,UACXD,EAAAA,EAAAA,KAACG,EAAS,OAEZH,EAAAA,EAAAA,KAACP,EAAa,CAAAQ,UACZD,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CACLC,MAAK,4GACLC,OAAQ,OACRC,MAAO,QACPC,WAAS,EACTC,WAAY1C,EAAAA,EAAM2C,QAClBC,QAASV,OAGZW,EAAAA,EAAAA,cAAad,IAAgBe,SAASC,QAC7B,G","sources":["components/Slideshow/SlideshowStyles.ts","components/Slideshow/Slideshow.tsx","components/OurWorks/OurWorksStyles.ts","components/OurWorks/OurWorks.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { COLOR } from \"../../assets/styles/index\";\r\nimport { BiLeftArrow, BiRightArrow } from \"react-icons/bi\";\r\n\r\nexport const Container = styled.div`\r\n  width: 90%;\r\n  height: 450px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    height: 400px;\r\n  }\r\n\r\n  @media screen and (max-height: 500px) {\r\n    height: 350px;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.div<{ $url: string }>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 450px;\r\n  background-image: ${({ $url }) => `url(${$url})`};\r\n  background-position: 50% 50%;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-color: transparent;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    height: 400px;\r\n  }\r\n  @media screen and (max-height: 500px) {\r\n    height: 350px;\r\n  }\r\n`;\r\n\r\nexport const PrevButton = styled(BiLeftArrow)`\r\n  width: 30px;\r\n  height: 30px;\r\n  color: ${COLOR.grey400};\r\n`;\r\n\r\nexport const NextButton = styled(BiRightArrow)`\r\n  width: 30px;\r\n  height: 30px;\r\n  color: ${COLOR.grey400};\r\n`;\r\n\r\nexport const ButtonWrapper = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 50px;\r\n  height: 50px;\r\n  background: ${COLOR.orange200};\r\n  border-radius: 5px;\r\n  border: transparent;\r\n  margin: 0 20px 0 20px;\r\n\r\n  &:hover ${PrevButton}, &:hover ${NextButton} {\r\n    color: ${COLOR.grey200};\r\n    transition: 0.5s ease;\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n","import React, { memo } from \"react\";\r\nimport { Slide } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport { galleries } from \"../../assets/mockData\";\r\nimport {\r\n  ButtonWrapper,\r\n  Container,\r\n  Image,\r\n  NextButton,\r\n  PrevButton,\r\n} from \"./SlideshowStyles\";\r\n\r\nconst properties = {\r\n  prevArrow: (\r\n    <ButtonWrapper>\r\n      <PrevButton />\r\n    </ButtonWrapper>\r\n  ),\r\n  nextArrow: (\r\n    <ButtonWrapper>\r\n      <NextButton />\r\n    </ButtonWrapper>\r\n  ),\r\n};\r\n\r\nexport const Slideshow = memo(() => {\r\n  return (\r\n    <Container>\r\n      <Slide {...properties}>\r\n        {galleries.works.map((slideImage, index) => (\r\n          <Image key={index} $url={slideImage.url} />\r\n        ))}\r\n      </Slide>\r\n    </Container>\r\n  );\r\n});\r\n","import { ForwardedRef } from \"react\";\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  overflow-y: hidden;\n`;\n\nexport const Title = styled.h2`\n  min-width: 300px;\n  font-size: 55px;\n  text-align: center;\n`;\n\nexport const WorksWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  width: 100%;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 80px;\n  width: 80%;\n  margin-top: 30px;\n`;\n\nexport const RefBlock = styled.div<{ ref: ForwardedRef<unknown> }>`\n  height: 20px;\n  width: 100%;\n`;\n","import { forwardRef, useCallback } from \"react\";\r\nimport { Button } from \"../common/Button/Button\";\r\nimport { Slideshow } from \"../Slideshow/Slideshow\";\r\nimport { COLOR } from \"../../assets/styles\";\r\nimport { createPortal } from \"react-dom\";\r\nimport {\r\n  ButtonWrapper,\r\n  Container,\r\n  RefBlock,\r\n  Title,\r\n  WorksWrapper,\r\n} from \"./OurWorksStyles\";\r\nimport { useGalleryModal } from \"../../assets/hooks\";\r\n\r\nconst OurWorks = forwardRef((props, ref) => {\r\n  const { displayModal, setIsOpen } = useGalleryModal();\r\n\r\n  const modalHandler = useCallback(() => {\r\n    setIsOpen(true);\r\n  }, [setIsOpen]);\r\n\r\n  return (\r\n    <Container>\r\n      <RefBlock ref={ref} />\r\n      <Title>Наши работы</Title>\r\n      <WorksWrapper>\r\n        <Slideshow />\r\n      </WorksWrapper>\r\n      <ButtonWrapper>\r\n        <Button\r\n          title={`Показать все работы `}\r\n          height={\"54px\"}\r\n          width={\"350px\"}\r\n          isShowAll\r\n          background={COLOR.grey100}\r\n          onClick={modalHandler}\r\n        />\r\n      </ButtonWrapper>\r\n      {createPortal(displayModal(), document.body)}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default OurWorks;\r\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","Image","_templateObject2","_ref","$url","concat","PrevButton","BiLeftArrow","_templateObject3","COLOR","grey400","NextButton","BiRightArrow","_templateObject4","ButtonWrapper","button","_templateObject5","orange200","grey200","properties","prevArrow","_jsx","children","nextArrow","Slideshow","memo","Slide","galleries","works","map","slideImage","index","url","Title","h2","WorksWrapper","RefBlock","forwardRef","props","ref","displayModal","setIsOpen","useGalleryModal","modalHandler","useCallback","_jsxs","Button","title","height","width","isShowAll","background","grey100","onClick","createPortal","document","body"],"sourceRoot":""}